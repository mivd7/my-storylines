### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


enum AccessRole {
  ADMIN
  USER
}

type Addition {
  createdAt: DateTime!
  id: ID!
  story: Story!
  text: String!
  writtenBy: User
}

type AdditionConnection {
  aggregate: AggregateAddition!
  edges: [AdditionEdge!]!
  pageInfo: PageInfo!
}

type AdditionEdge {
  cursor: String!
  node: Addition!
}

enum AdditionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AdditionWhereInput {
  AND: [AdditionWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [AdditionWhereInput!]
  OR: [AdditionWhereInput!]
  story: StoryWhereInput
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
  writtenBy: UserWhereInput
}

input AdditionWhereUniqueInput {
  id: ID
}

type AggregateAddition {
  count: Int!
}

type AggregateAuthPayload {
  count: Int!
}

type AggregateStory {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type AuthPayloadConnection {
  aggregate: AggregateAuthPayload!
  edges: [AuthPayloadEdge!]!
  pageInfo: PageInfo!
}

type AuthPayloadEdge {
  cursor: String!
  node: AuthPayload!
}

enum AuthPayloadOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  token_ASC
  token_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AuthPayloadWhereInput {
  AND: [AuthPayloadWhereInput!]
  NOT: [AuthPayloadWhereInput!]
  OR: [AuthPayloadWhereInput!]
  token: String
  token_contains: String
  token_ends_with: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_ends_with: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_starts_with: String
  user: UserWhereInput
}

scalar DateTime

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  addition(where: AdditionWhereUniqueInput!): Addition
  additions(after: String, before: String, first: Int, last: Int, orderBy: AdditionOrderByInput, skip: Int, where: AdditionWhereInput): [Addition!]!
  additionsConnection(after: String, before: String, first: Int, last: Int, orderBy: AdditionOrderByInput, skip: Int, where: AdditionWhereInput): AdditionConnection!
  authPayloads(after: String, before: String, first: Int, last: Int, orderBy: AuthPayloadOrderByInput, skip: Int, where: AuthPayloadWhereInput): [AuthPayload!]!
  authPayloadsConnection(after: String, before: String, first: Int, last: Int, orderBy: AuthPayloadOrderByInput, skip: Int, where: AuthPayloadWhereInput): AuthPayloadConnection!
  stories(after: String, before: String, first: Int, last: Int, orderBy: StoryOrderByInput, skip: Int, where: StoryWhereInput): [Story!]!
  storiesConnection(after: String, before: String, first: Int, last: Int, orderBy: StoryOrderByInput, skip: Int, where: StoryWhereInput): StoryConnection!
  story(where: StoryWhereUniqueInput!): Story
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type Story {
  additions(after: String, before: String, first: Int, last: Int, orderBy: AdditionOrderByInput, skip: Int, where: AdditionWhereInput): [Addition!]
  author: User
  createdAt: DateTime!
  id: ID!
  openingLine: String!
  title: String
  updatedAt: DateTime!
}

type StoryConnection {
  aggregate: AggregateStory!
  edges: [StoryEdge!]!
  pageInfo: PageInfo!
}

type StoryEdge {
  cursor: String!
  node: Story!
}

enum StoryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  openingLine_ASC
  openingLine_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input StoryWhereInput {
  additions_every: AdditionWhereInput
  additions_none: AdditionWhereInput
  additions_some: AdditionWhereInput
  AND: [StoryWhereInput!]
  author: UserWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [StoryWhereInput!]
  openingLine: String
  openingLine_contains: String
  openingLine_ends_with: String
  openingLine_gt: String
  openingLine_gte: String
  openingLine_in: [String!]
  openingLine_lt: String
  openingLine_lte: String
  openingLine_not: String
  openingLine_not_contains: String
  openingLine_not_ends_with: String
  openingLine_not_in: [String!]
  openingLine_not_starts_with: String
  openingLine_starts_with: String
  OR: [StoryWhereInput!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input StoryWhereUniqueInput {
  id: ID
}

type User {
  accessRole: AccessRole!
  additions(after: String, before: String, first: Int, last: Int, orderBy: AdditionOrderByInput, skip: Int, where: AdditionWhereInput): [Addition!]
  email: String!
  id: ID!
  name: String!
  password: String!
  stories(after: String, before: String, first: Int, last: Int, orderBy: StoryOrderByInput, skip: Int, where: StoryWhereInput): [Story!]
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  accessRole_ASC
  accessRole_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  accessRole: AccessRole
  accessRole_in: [AccessRole!]
  accessRole_not: AccessRole
  accessRole_not_in: [AccessRole!]
  additions_every: AdditionWhereInput
  additions_none: AdditionWhereInput
  additions_some: AdditionWhereInput
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  stories_every: StoryWhereInput
  stories_none: StoryWhereInput
  stories_some: StoryWhereInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
  name: String
  password: String
}
