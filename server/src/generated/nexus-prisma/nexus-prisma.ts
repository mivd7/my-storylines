/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Story: StoryObject
      Addition: AdditionObject
      User: UserObject
      StoryConnection: StoryConnectionObject
      PageInfo: PageInfoObject
      StoryEdge: StoryEdgeObject
      AggregateStory: AggregateStoryObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      AdditionConnection: AdditionConnectionObject
      AdditionEdge: AdditionEdgeObject
      AggregateAddition: AggregateAdditionObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      StorySubscriptionPayload: StorySubscriptionPayloadObject
      StoryPreviousValues: StoryPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      AdditionSubscriptionPayload: AdditionSubscriptionPayloadObject
      AdditionPreviousValues: AdditionPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Story: StoryFieldDetails
      Addition: AdditionFieldDetails
      User: UserFieldDetails
      StoryConnection: StoryConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      StoryEdge: StoryEdgeFieldDetails
      AggregateStory: AggregateStoryFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      AdditionConnection: AdditionConnectionFieldDetails
      AdditionEdge: AdditionEdgeFieldDetails
      AggregateAddition: AggregateAdditionFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      StorySubscriptionPayload: StorySubscriptionPayloadFieldDetails
      StoryPreviousValues: StoryPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      AdditionSubscriptionPayload: AdditionSubscriptionPayloadFieldDetails
      AdditionPreviousValues: AdditionPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      StoryWhereUniqueInput: StoryWhereUniqueInputInputObject
      AdditionWhereInput: AdditionWhereInputInputObject
      StoryWhereInput: StoryWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      AdditionWhereUniqueInput: AdditionWhereUniqueInputInputObject
      StoryCreateInput: StoryCreateInputInputObject
      AdditionCreateManyWithoutStoryInput: AdditionCreateManyWithoutStoryInputInputObject
      AdditionCreateWithoutStoryInput: AdditionCreateWithoutStoryInputInputObject
      UserCreateOneWithoutAdditionsInput: UserCreateOneWithoutAdditionsInputInputObject
      UserCreateWithoutAdditionsInput: UserCreateWithoutAdditionsInputInputObject
      StoryCreateManyWithoutAuthorInput: StoryCreateManyWithoutAuthorInputInputObject
      StoryCreateWithoutAuthorInput: StoryCreateWithoutAuthorInputInputObject
      UserCreateOneWithoutStoriesInput: UserCreateOneWithoutStoriesInputInputObject
      UserCreateWithoutStoriesInput: UserCreateWithoutStoriesInputInputObject
      AdditionCreateManyWithoutWrittenByInput: AdditionCreateManyWithoutWrittenByInputInputObject
      AdditionCreateWithoutWrittenByInput: AdditionCreateWithoutWrittenByInputInputObject
      StoryCreateOneWithoutAdditionsInput: StoryCreateOneWithoutAdditionsInputInputObject
      StoryCreateWithoutAdditionsInput: StoryCreateWithoutAdditionsInputInputObject
      StoryUpdateInput: StoryUpdateInputInputObject
      AdditionUpdateManyWithoutStoryInput: AdditionUpdateManyWithoutStoryInputInputObject
      AdditionUpdateWithWhereUniqueWithoutStoryInput: AdditionUpdateWithWhereUniqueWithoutStoryInputInputObject
      AdditionUpdateWithoutStoryDataInput: AdditionUpdateWithoutStoryDataInputInputObject
      UserUpdateOneWithoutAdditionsInput: UserUpdateOneWithoutAdditionsInputInputObject
      UserUpdateWithoutAdditionsDataInput: UserUpdateWithoutAdditionsDataInputInputObject
      StoryUpdateManyWithoutAuthorInput: StoryUpdateManyWithoutAuthorInputInputObject
      StoryUpdateWithWhereUniqueWithoutAuthorInput: StoryUpdateWithWhereUniqueWithoutAuthorInputInputObject
      StoryUpdateWithoutAuthorDataInput: StoryUpdateWithoutAuthorDataInputInputObject
      StoryUpsertWithWhereUniqueWithoutAuthorInput: StoryUpsertWithWhereUniqueWithoutAuthorInputInputObject
      StoryScalarWhereInput: StoryScalarWhereInputInputObject
      StoryUpdateManyWithWhereNestedInput: StoryUpdateManyWithWhereNestedInputInputObject
      StoryUpdateManyDataInput: StoryUpdateManyDataInputInputObject
      UserUpsertWithoutAdditionsInput: UserUpsertWithoutAdditionsInputInputObject
      AdditionUpsertWithWhereUniqueWithoutStoryInput: AdditionUpsertWithWhereUniqueWithoutStoryInputInputObject
      AdditionScalarWhereInput: AdditionScalarWhereInputInputObject
      AdditionUpdateManyWithWhereNestedInput: AdditionUpdateManyWithWhereNestedInputInputObject
      AdditionUpdateManyDataInput: AdditionUpdateManyDataInputInputObject
      UserUpdateOneWithoutStoriesInput: UserUpdateOneWithoutStoriesInputInputObject
      UserUpdateWithoutStoriesDataInput: UserUpdateWithoutStoriesDataInputInputObject
      AdditionUpdateManyWithoutWrittenByInput: AdditionUpdateManyWithoutWrittenByInputInputObject
      AdditionUpdateWithWhereUniqueWithoutWrittenByInput: AdditionUpdateWithWhereUniqueWithoutWrittenByInputInputObject
      AdditionUpdateWithoutWrittenByDataInput: AdditionUpdateWithoutWrittenByDataInputInputObject
      StoryUpdateOneRequiredWithoutAdditionsInput: StoryUpdateOneRequiredWithoutAdditionsInputInputObject
      StoryUpdateWithoutAdditionsDataInput: StoryUpdateWithoutAdditionsDataInputInputObject
      StoryUpsertWithoutAdditionsInput: StoryUpsertWithoutAdditionsInputInputObject
      AdditionUpsertWithWhereUniqueWithoutWrittenByInput: AdditionUpsertWithWhereUniqueWithoutWrittenByInputInputObject
      UserUpsertWithoutStoriesInput: UserUpsertWithoutStoriesInputInputObject
      StoryUpdateManyMutationInput: StoryUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      AdditionCreateInput: AdditionCreateInputInputObject
      AdditionUpdateInput: AdditionUpdateInputInputObject
      AdditionUpdateManyMutationInput: AdditionUpdateManyMutationInputInputObject
      StorySubscriptionWhereInput: StorySubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      AdditionSubscriptionWhereInput: AdditionSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    AccessRole: AccessRoleValues,
    AdditionOrderByInput: AdditionOrderByInputValues,
    StoryOrderByInput: StoryOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'story', args?: QueryStoryArgs[] | false, alias?: string  } 
  | { name: 'stories', args?: QueryStoriesArgs[] | false, alias?: string  } 
  | { name: 'storiesConnection', args?: QueryStoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'addition', args?: QueryAdditionArgs[] | false, alias?: string  } 
  | { name: 'additions', args?: QueryAdditionsArgs[] | false, alias?: string  } 
  | { name: 'additionsConnection', args?: QueryAdditionsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'story'
  | 'stories'
  | 'storiesConnection'
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'addition'
  | 'additions'
  | 'additionsConnection'


type QueryStoryArgs =
  | 'where'
type QueryStoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryStoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAdditionArgs =
  | 'where'
type QueryAdditionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAdditionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  story: {
    type: 'Story'
    args: Record<QueryStoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: StoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story | null> | prisma.Story | null
  }
  stories: {
    type: 'Story'
    args: Record<QueryStoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StoryWhereInput | null, orderBy?: prisma.StoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story[]> | prisma.Story[]
  }
  storiesConnection: {
    type: 'StoryConnection'
    args: Record<QueryStoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StoryWhereInput | null, orderBy?: prisma.StoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StoryConnection> | prisma.StoryConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  addition: {
    type: 'Addition'
    args: Record<QueryAdditionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AdditionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition | null> | prisma.Addition | null
  }
  additions: {
    type: 'Addition'
    args: Record<QueryAdditionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AdditionWhereInput | null, orderBy?: prisma.AdditionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition[]> | prisma.Addition[]
  }
  additionsConnection: {
    type: 'AdditionConnection'
    args: Record<QueryAdditionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AdditionWhereInput | null, orderBy?: prisma.AdditionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AdditionConnection> | prisma.AdditionConnection
  }
}
  

// Types for Story

type StoryObject =
  | StoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'openingLine', args?: [] | false, alias?: string  } 
  | { name: 'additions', args?: StoryAdditionsArgs[] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 

type StoryFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'
  | 'openingLine'
  | 'additions'
  | 'author'


type StoryAdditionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface StoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  openingLine: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  additions: {
    type: 'Addition'
    args: Record<StoryAdditionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Story">,
      args: { where?: AdditionWhereInput | null, orderBy?: prisma.AdditionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition[]> | prisma.Addition[]
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Story">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for Addition

type AdditionObject =
  | AdditionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'story', args?: [] | false, alias?: string  } 
  | { name: 'writtenBy', args?: [] | false, alias?: string  } 

type AdditionFields =
  | 'id'
  | 'createdAt'
  | 'text'
  | 'story'
  | 'writtenBy'



  

export interface AdditionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  story: {
    type: 'Story'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Addition">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story> | prisma.Story
  }
  writtenBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Addition">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'accessRole', args?: [] | false, alias?: string  } 
  | { name: 'stories', args?: UserStoriesArgs[] | false, alias?: string  } 
  | { name: 'additions', args?: UserAdditionsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'email'
  | 'password'
  | 'accessRole'
  | 'stories'
  | 'additions'


type UserStoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserAdditionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  accessRole: {
    type: 'AccessRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AccessRole> | prisma.AccessRole
  }
  stories: {
    type: 'Story'
    args: Record<UserStoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: StoryWhereInput | null, orderBy?: prisma.StoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story[]> | prisma.Story[]
  }
  additions: {
    type: 'Addition'
    args: Record<UserAdditionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: AdditionWhereInput | null, orderBy?: prisma.AdditionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition[]> | prisma.Addition[]
  }
}
  

// Types for StoryConnection

type StoryConnectionObject =
  | StoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type StoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface StoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'StoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"StoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StoryEdge[]> | prisma.StoryEdge[]
  }
  aggregate: {
    type: 'AggregateStory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateStory> | prisma.AggregateStory
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for StoryEdge

type StoryEdgeObject =
  | StoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type StoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface StoryEdgeFieldDetails {
  node: {
    type: 'Story'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story> | prisma.Story
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateStory

type AggregateStoryObject =
  | AggregateStoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateStoryFields =
  | 'count'



  

export interface AggregateStoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AdditionConnection

type AdditionConnectionObject =
  | AdditionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AdditionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AdditionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AdditionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AdditionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AdditionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AdditionEdge[]> | prisma.AdditionEdge[]
  }
  aggregate: {
    type: 'AggregateAddition'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AdditionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAddition> | prisma.AggregateAddition
  }
}
  

// Types for AdditionEdge

type AdditionEdgeObject =
  | AdditionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AdditionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AdditionEdgeFieldDetails {
  node: {
    type: 'Addition'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AdditionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition> | prisma.Addition
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAddition

type AggregateAdditionObject =
  | AggregateAdditionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAdditionFields =
  | 'count'



  

export interface AggregateAdditionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createStory', args?: MutationCreateStoryArgs[] | false, alias?: string  } 
  | { name: 'updateStory', args?: MutationUpdateStoryArgs[] | false, alias?: string  } 
  | { name: 'updateManyStories', args?: MutationUpdateManyStoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertStory', args?: MutationUpsertStoryArgs[] | false, alias?: string  } 
  | { name: 'deleteStory', args?: MutationDeleteStoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyStories', args?: MutationDeleteManyStoriesArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createAddition', args?: MutationCreateAdditionArgs[] | false, alias?: string  } 
  | { name: 'updateAddition', args?: MutationUpdateAdditionArgs[] | false, alias?: string  } 
  | { name: 'updateManyAdditions', args?: MutationUpdateManyAdditionsArgs[] | false, alias?: string  } 
  | { name: 'upsertAddition', args?: MutationUpsertAdditionArgs[] | false, alias?: string  } 
  | { name: 'deleteAddition', args?: MutationDeleteAdditionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAdditions', args?: MutationDeleteManyAdditionsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createStory'
  | 'updateStory'
  | 'updateManyStories'
  | 'upsertStory'
  | 'deleteStory'
  | 'deleteManyStories'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createAddition'
  | 'updateAddition'
  | 'updateManyAdditions'
  | 'upsertAddition'
  | 'deleteAddition'
  | 'deleteManyAdditions'


type MutationCreateStoryArgs =
  | 'data'
type MutationUpdateStoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyStoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertStoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteStoryArgs =
  | 'where'
type MutationDeleteManyStoriesArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateAdditionArgs =
  | 'data'
type MutationUpdateAdditionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAdditionsArgs =
  | 'data'
  | 'where'
type MutationUpsertAdditionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAdditionArgs =
  | 'where'
type MutationDeleteManyAdditionsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createStory: {
    type: 'Story'
    args: Record<MutationCreateStoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story> | prisma.Story
  }
  updateStory: {
    type: 'Story'
    args: Record<MutationUpdateStoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StoryUpdateInput, where: StoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story | null> | prisma.Story | null
  }
  updateManyStories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyStoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StoryUpdateManyMutationInput, where?: StoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertStory: {
    type: 'Story'
    args: Record<MutationUpsertStoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StoryWhereUniqueInput, create: StoryCreateInput, update: StoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story> | prisma.Story
  }
  deleteStory: {
    type: 'Story'
    args: Record<MutationDeleteStoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story | null> | prisma.Story | null
  }
  deleteManyStories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyStoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: StoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAddition: {
    type: 'Addition'
    args: Record<MutationCreateAdditionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AdditionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition> | prisma.Addition
  }
  updateAddition: {
    type: 'Addition'
    args: Record<MutationUpdateAdditionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AdditionUpdateInput, where: AdditionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition | null> | prisma.Addition | null
  }
  updateManyAdditions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAdditionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AdditionUpdateManyMutationInput, where?: AdditionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAddition: {
    type: 'Addition'
    args: Record<MutationUpsertAdditionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AdditionWhereUniqueInput, create: AdditionCreateInput, update: AdditionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition> | prisma.Addition
  }
  deleteAddition: {
    type: 'Addition'
    args: Record<MutationDeleteAdditionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AdditionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition | null> | prisma.Addition | null
  }
  deleteManyAdditions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAdditionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AdditionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'story', args?: SubscriptionStoryArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'addition', args?: SubscriptionAdditionArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'story'
  | 'user'
  | 'addition'


type SubscriptionStoryArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
type SubscriptionAdditionArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  story: {
    type: 'StorySubscriptionPayload'
    args: Record<SubscriptionStoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: StorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StorySubscriptionPayload | null> | prisma.StorySubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  addition: {
    type: 'AdditionSubscriptionPayload'
    args: Record<SubscriptionAdditionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AdditionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AdditionSubscriptionPayload | null> | prisma.AdditionSubscriptionPayload | null
  }
}
  

// Types for StorySubscriptionPayload

type StorySubscriptionPayloadObject =
  | StorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type StorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface StorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Story'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Story | null> | prisma.Story | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'StoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StoryPreviousValues | null> | prisma.StoryPreviousValues | null
  }
}
  

// Types for StoryPreviousValues

type StoryPreviousValuesObject =
  | StoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'openingLine', args?: [] | false, alias?: string  } 

type StoryPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'
  | 'openingLine'



  

export interface StoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  openingLine: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'accessRole', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'password'
  | 'accessRole'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  accessRole: {
    type: 'AccessRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AccessRole> | prisma.AccessRole
  }
}
  

// Types for AdditionSubscriptionPayload

type AdditionSubscriptionPayloadObject =
  | AdditionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AdditionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AdditionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AdditionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Addition'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AdditionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Addition | null> | prisma.Addition | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AdditionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AdditionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AdditionPreviousValues | null> | prisma.AdditionPreviousValues | null
  }
}
  

// Types for AdditionPreviousValues

type AdditionPreviousValuesObject =
  | AdditionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 

type AdditionPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'text'



  

export interface AdditionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface StoryWhereUniqueInput {
  id?: string | null
}
export type StoryWhereUniqueInputInputObject =
  | Extract<keyof StoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AdditionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  story?: StoryWhereInput | null
  writtenBy?: UserWhereInput | null
  AND?: AdditionWhereInput[]
  OR?: AdditionWhereInput[]
  NOT?: AdditionWhereInput[]
}
export type AdditionWhereInputInputObject =
  | Extract<keyof AdditionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'story', alias?: string  } 
  | { name: 'writtenBy', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface StoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  openingLine?: string | null
  openingLine_not?: string | null
  openingLine_in?: string[]
  openingLine_not_in?: string[]
  openingLine_lt?: string | null
  openingLine_lte?: string | null
  openingLine_gt?: string | null
  openingLine_gte?: string | null
  openingLine_contains?: string | null
  openingLine_not_contains?: string | null
  openingLine_starts_with?: string | null
  openingLine_not_starts_with?: string | null
  openingLine_ends_with?: string | null
  openingLine_not_ends_with?: string | null
  additions_every?: AdditionWhereInput | null
  additions_some?: AdditionWhereInput | null
  additions_none?: AdditionWhereInput | null
  author?: UserWhereInput | null
  AND?: StoryWhereInput[]
  OR?: StoryWhereInput[]
  NOT?: StoryWhereInput[]
}
export type StoryWhereInputInputObject =
  | Extract<keyof StoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  | { name: 'openingLine_not', alias?: string  } 
  | { name: 'openingLine_in', alias?: string  } 
  | { name: 'openingLine_not_in', alias?: string  } 
  | { name: 'openingLine_lt', alias?: string  } 
  | { name: 'openingLine_lte', alias?: string  } 
  | { name: 'openingLine_gt', alias?: string  } 
  | { name: 'openingLine_gte', alias?: string  } 
  | { name: 'openingLine_contains', alias?: string  } 
  | { name: 'openingLine_not_contains', alias?: string  } 
  | { name: 'openingLine_starts_with', alias?: string  } 
  | { name: 'openingLine_not_starts_with', alias?: string  } 
  | { name: 'openingLine_ends_with', alias?: string  } 
  | { name: 'openingLine_not_ends_with', alias?: string  } 
  | { name: 'additions_every', alias?: string  } 
  | { name: 'additions_some', alias?: string  } 
  | { name: 'additions_none', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  accessRole?: prisma.AccessRole | null
  accessRole_not?: prisma.AccessRole | null
  accessRole_in?: prisma.AccessRole[]
  accessRole_not_in?: prisma.AccessRole[]
  stories_every?: StoryWhereInput | null
  stories_some?: StoryWhereInput | null
  stories_none?: StoryWhereInput | null
  additions_every?: AdditionWhereInput | null
  additions_some?: AdditionWhereInput | null
  additions_none?: AdditionWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'accessRole', alias?: string  } 
  | { name: 'accessRole_not', alias?: string  } 
  | { name: 'accessRole_in', alias?: string  } 
  | { name: 'accessRole_not_in', alias?: string  } 
  | { name: 'stories_every', alias?: string  } 
  | { name: 'stories_some', alias?: string  } 
  | { name: 'stories_none', alias?: string  } 
  | { name: 'additions_every', alias?: string  } 
  | { name: 'additions_some', alias?: string  } 
  | { name: 'additions_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  name?: string | null
  email?: string | null
  password?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface AdditionWhereUniqueInput {
  id?: string | null
}
export type AdditionWhereUniqueInputInputObject =
  | Extract<keyof AdditionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface StoryCreateInput {
  title?: string | null
  openingLine?: string
  additions?: AdditionCreateManyWithoutStoryInput | null
  author?: UserCreateOneWithoutStoriesInput | null
}
export type StoryCreateInputInputObject =
  | Extract<keyof StoryCreateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  | { name: 'additions', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface AdditionCreateManyWithoutStoryInput {
  create?: AdditionCreateWithoutStoryInput[]
  connect?: AdditionWhereUniqueInput[]
}
export type AdditionCreateManyWithoutStoryInputInputObject =
  | Extract<keyof AdditionCreateManyWithoutStoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AdditionCreateWithoutStoryInput {
  text?: string
  writtenBy?: UserCreateOneWithoutAdditionsInput | null
}
export type AdditionCreateWithoutStoryInputInputObject =
  | Extract<keyof AdditionCreateWithoutStoryInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'writtenBy', alias?: string  } 
  
export interface UserCreateOneWithoutAdditionsInput {
  create?: UserCreateWithoutAdditionsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutAdditionsInputInputObject =
  | Extract<keyof UserCreateOneWithoutAdditionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutAdditionsInput {
  name?: string
  email?: string
  password?: string
  accessRole?: prisma.AccessRole
  stories?: StoryCreateManyWithoutAuthorInput | null
}
export type UserCreateWithoutAdditionsInputInputObject =
  | Extract<keyof UserCreateWithoutAdditionsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'accessRole', alias?: string  } 
  | { name: 'stories', alias?: string  } 
  
export interface StoryCreateManyWithoutAuthorInput {
  create?: StoryCreateWithoutAuthorInput[]
  connect?: StoryWhereUniqueInput[]
}
export type StoryCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof StoryCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface StoryCreateWithoutAuthorInput {
  title?: string | null
  openingLine?: string
  additions?: AdditionCreateManyWithoutStoryInput | null
}
export type StoryCreateWithoutAuthorInputInputObject =
  | Extract<keyof StoryCreateWithoutAuthorInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  | { name: 'additions', alias?: string  } 
  
export interface UserCreateOneWithoutStoriesInput {
  create?: UserCreateWithoutStoriesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutStoriesInputInputObject =
  | Extract<keyof UserCreateOneWithoutStoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutStoriesInput {
  name?: string
  email?: string
  password?: string
  accessRole?: prisma.AccessRole
  additions?: AdditionCreateManyWithoutWrittenByInput | null
}
export type UserCreateWithoutStoriesInputInputObject =
  | Extract<keyof UserCreateWithoutStoriesInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'accessRole', alias?: string  } 
  | { name: 'additions', alias?: string  } 
  
export interface AdditionCreateManyWithoutWrittenByInput {
  create?: AdditionCreateWithoutWrittenByInput[]
  connect?: AdditionWhereUniqueInput[]
}
export type AdditionCreateManyWithoutWrittenByInputInputObject =
  | Extract<keyof AdditionCreateManyWithoutWrittenByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AdditionCreateWithoutWrittenByInput {
  text?: string
  story?: StoryCreateOneWithoutAdditionsInput
}
export type AdditionCreateWithoutWrittenByInputInputObject =
  | Extract<keyof AdditionCreateWithoutWrittenByInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'story', alias?: string  } 
  
export interface StoryCreateOneWithoutAdditionsInput {
  create?: StoryCreateWithoutAdditionsInput | null
  connect?: StoryWhereUniqueInput | null
}
export type StoryCreateOneWithoutAdditionsInputInputObject =
  | Extract<keyof StoryCreateOneWithoutAdditionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface StoryCreateWithoutAdditionsInput {
  title?: string | null
  openingLine?: string
  author?: UserCreateOneWithoutStoriesInput | null
}
export type StoryCreateWithoutAdditionsInputInputObject =
  | Extract<keyof StoryCreateWithoutAdditionsInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface StoryUpdateInput {
  title?: string | null
  openingLine?: string | null
  additions?: AdditionUpdateManyWithoutStoryInput | null
  author?: UserUpdateOneWithoutStoriesInput | null
}
export type StoryUpdateInputInputObject =
  | Extract<keyof StoryUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  | { name: 'additions', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface AdditionUpdateManyWithoutStoryInput {
  create?: AdditionCreateWithoutStoryInput[]
  delete?: AdditionWhereUniqueInput[]
  connect?: AdditionWhereUniqueInput[]
  set?: AdditionWhereUniqueInput[]
  disconnect?: AdditionWhereUniqueInput[]
  update?: AdditionUpdateWithWhereUniqueWithoutStoryInput[]
  upsert?: AdditionUpsertWithWhereUniqueWithoutStoryInput[]
  deleteMany?: AdditionScalarWhereInput[]
  updateMany?: AdditionUpdateManyWithWhereNestedInput[]
}
export type AdditionUpdateManyWithoutStoryInputInputObject =
  | Extract<keyof AdditionUpdateManyWithoutStoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AdditionUpdateWithWhereUniqueWithoutStoryInput {
  where?: AdditionWhereUniqueInput
  data?: AdditionUpdateWithoutStoryDataInput
}
export type AdditionUpdateWithWhereUniqueWithoutStoryInputInputObject =
  | Extract<keyof AdditionUpdateWithWhereUniqueWithoutStoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AdditionUpdateWithoutStoryDataInput {
  text?: string | null
  writtenBy?: UserUpdateOneWithoutAdditionsInput | null
}
export type AdditionUpdateWithoutStoryDataInputInputObject =
  | Extract<keyof AdditionUpdateWithoutStoryDataInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'writtenBy', alias?: string  } 
  
export interface UserUpdateOneWithoutAdditionsInput {
  create?: UserCreateWithoutAdditionsInput | null
  update?: UserUpdateWithoutAdditionsDataInput | null
  upsert?: UserUpsertWithoutAdditionsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutAdditionsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutAdditionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutAdditionsDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  accessRole?: prisma.AccessRole | null
  stories?: StoryUpdateManyWithoutAuthorInput | null
}
export type UserUpdateWithoutAdditionsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutAdditionsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'accessRole', alias?: string  } 
  | { name: 'stories', alias?: string  } 
  
export interface StoryUpdateManyWithoutAuthorInput {
  create?: StoryCreateWithoutAuthorInput[]
  delete?: StoryWhereUniqueInput[]
  connect?: StoryWhereUniqueInput[]
  set?: StoryWhereUniqueInput[]
  disconnect?: StoryWhereUniqueInput[]
  update?: StoryUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: StoryUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: StoryScalarWhereInput[]
  updateMany?: StoryUpdateManyWithWhereNestedInput[]
}
export type StoryUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof StoryUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface StoryUpdateWithWhereUniqueWithoutAuthorInput {
  where?: StoryWhereUniqueInput
  data?: StoryUpdateWithoutAuthorDataInput
}
export type StoryUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof StoryUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface StoryUpdateWithoutAuthorDataInput {
  title?: string | null
  openingLine?: string | null
  additions?: AdditionUpdateManyWithoutStoryInput | null
}
export type StoryUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof StoryUpdateWithoutAuthorDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  | { name: 'additions', alias?: string  } 
  
export interface StoryUpsertWithWhereUniqueWithoutAuthorInput {
  where?: StoryWhereUniqueInput
  update?: StoryUpdateWithoutAuthorDataInput
  create?: StoryCreateWithoutAuthorInput
}
export type StoryUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof StoryUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface StoryScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  openingLine?: string | null
  openingLine_not?: string | null
  openingLine_in?: string[]
  openingLine_not_in?: string[]
  openingLine_lt?: string | null
  openingLine_lte?: string | null
  openingLine_gt?: string | null
  openingLine_gte?: string | null
  openingLine_contains?: string | null
  openingLine_not_contains?: string | null
  openingLine_starts_with?: string | null
  openingLine_not_starts_with?: string | null
  openingLine_ends_with?: string | null
  openingLine_not_ends_with?: string | null
  AND?: StoryScalarWhereInput[]
  OR?: StoryScalarWhereInput[]
  NOT?: StoryScalarWhereInput[]
}
export type StoryScalarWhereInputInputObject =
  | Extract<keyof StoryScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  | { name: 'openingLine_not', alias?: string  } 
  | { name: 'openingLine_in', alias?: string  } 
  | { name: 'openingLine_not_in', alias?: string  } 
  | { name: 'openingLine_lt', alias?: string  } 
  | { name: 'openingLine_lte', alias?: string  } 
  | { name: 'openingLine_gt', alias?: string  } 
  | { name: 'openingLine_gte', alias?: string  } 
  | { name: 'openingLine_contains', alias?: string  } 
  | { name: 'openingLine_not_contains', alias?: string  } 
  | { name: 'openingLine_starts_with', alias?: string  } 
  | { name: 'openingLine_not_starts_with', alias?: string  } 
  | { name: 'openingLine_ends_with', alias?: string  } 
  | { name: 'openingLine_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface StoryUpdateManyWithWhereNestedInput {
  where?: StoryScalarWhereInput
  data?: StoryUpdateManyDataInput
}
export type StoryUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof StoryUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface StoryUpdateManyDataInput {
  title?: string | null
  openingLine?: string | null
}
export type StoryUpdateManyDataInputInputObject =
  | Extract<keyof StoryUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  
export interface UserUpsertWithoutAdditionsInput {
  update?: UserUpdateWithoutAdditionsDataInput
  create?: UserCreateWithoutAdditionsInput
}
export type UserUpsertWithoutAdditionsInputInputObject =
  | Extract<keyof UserUpsertWithoutAdditionsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AdditionUpsertWithWhereUniqueWithoutStoryInput {
  where?: AdditionWhereUniqueInput
  update?: AdditionUpdateWithoutStoryDataInput
  create?: AdditionCreateWithoutStoryInput
}
export type AdditionUpsertWithWhereUniqueWithoutStoryInputInputObject =
  | Extract<keyof AdditionUpsertWithWhereUniqueWithoutStoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AdditionScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  AND?: AdditionScalarWhereInput[]
  OR?: AdditionScalarWhereInput[]
  NOT?: AdditionScalarWhereInput[]
}
export type AdditionScalarWhereInputInputObject =
  | Extract<keyof AdditionScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AdditionUpdateManyWithWhereNestedInput {
  where?: AdditionScalarWhereInput
  data?: AdditionUpdateManyDataInput
}
export type AdditionUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AdditionUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AdditionUpdateManyDataInput {
  text?: string | null
}
export type AdditionUpdateManyDataInputInputObject =
  | Extract<keyof AdditionUpdateManyDataInput, string>
  | { name: 'text', alias?: string  } 
  
export interface UserUpdateOneWithoutStoriesInput {
  create?: UserCreateWithoutStoriesInput | null
  update?: UserUpdateWithoutStoriesDataInput | null
  upsert?: UserUpsertWithoutStoriesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutStoriesInputInputObject =
  | Extract<keyof UserUpdateOneWithoutStoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutStoriesDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  accessRole?: prisma.AccessRole | null
  additions?: AdditionUpdateManyWithoutWrittenByInput | null
}
export type UserUpdateWithoutStoriesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutStoriesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'accessRole', alias?: string  } 
  | { name: 'additions', alias?: string  } 
  
export interface AdditionUpdateManyWithoutWrittenByInput {
  create?: AdditionCreateWithoutWrittenByInput[]
  delete?: AdditionWhereUniqueInput[]
  connect?: AdditionWhereUniqueInput[]
  set?: AdditionWhereUniqueInput[]
  disconnect?: AdditionWhereUniqueInput[]
  update?: AdditionUpdateWithWhereUniqueWithoutWrittenByInput[]
  upsert?: AdditionUpsertWithWhereUniqueWithoutWrittenByInput[]
  deleteMany?: AdditionScalarWhereInput[]
  updateMany?: AdditionUpdateManyWithWhereNestedInput[]
}
export type AdditionUpdateManyWithoutWrittenByInputInputObject =
  | Extract<keyof AdditionUpdateManyWithoutWrittenByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AdditionUpdateWithWhereUniqueWithoutWrittenByInput {
  where?: AdditionWhereUniqueInput
  data?: AdditionUpdateWithoutWrittenByDataInput
}
export type AdditionUpdateWithWhereUniqueWithoutWrittenByInputInputObject =
  | Extract<keyof AdditionUpdateWithWhereUniqueWithoutWrittenByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AdditionUpdateWithoutWrittenByDataInput {
  text?: string | null
  story?: StoryUpdateOneRequiredWithoutAdditionsInput | null
}
export type AdditionUpdateWithoutWrittenByDataInputInputObject =
  | Extract<keyof AdditionUpdateWithoutWrittenByDataInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'story', alias?: string  } 
  
export interface StoryUpdateOneRequiredWithoutAdditionsInput {
  create?: StoryCreateWithoutAdditionsInput | null
  update?: StoryUpdateWithoutAdditionsDataInput | null
  upsert?: StoryUpsertWithoutAdditionsInput | null
  connect?: StoryWhereUniqueInput | null
}
export type StoryUpdateOneRequiredWithoutAdditionsInputInputObject =
  | Extract<keyof StoryUpdateOneRequiredWithoutAdditionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface StoryUpdateWithoutAdditionsDataInput {
  title?: string | null
  openingLine?: string | null
  author?: UserUpdateOneWithoutStoriesInput | null
}
export type StoryUpdateWithoutAdditionsDataInputInputObject =
  | Extract<keyof StoryUpdateWithoutAdditionsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface StoryUpsertWithoutAdditionsInput {
  update?: StoryUpdateWithoutAdditionsDataInput
  create?: StoryCreateWithoutAdditionsInput
}
export type StoryUpsertWithoutAdditionsInputInputObject =
  | Extract<keyof StoryUpsertWithoutAdditionsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AdditionUpsertWithWhereUniqueWithoutWrittenByInput {
  where?: AdditionWhereUniqueInput
  update?: AdditionUpdateWithoutWrittenByDataInput
  create?: AdditionCreateWithoutWrittenByInput
}
export type AdditionUpsertWithWhereUniqueWithoutWrittenByInputInputObject =
  | Extract<keyof AdditionUpsertWithWhereUniqueWithoutWrittenByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithoutStoriesInput {
  update?: UserUpdateWithoutStoriesDataInput
  create?: UserCreateWithoutStoriesInput
}
export type UserUpsertWithoutStoriesInputInputObject =
  | Extract<keyof UserUpsertWithoutStoriesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface StoryUpdateManyMutationInput {
  title?: string | null
  openingLine?: string | null
}
export type StoryUpdateManyMutationInputInputObject =
  | Extract<keyof StoryUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'openingLine', alias?: string  } 
  
export interface UserCreateInput {
  name?: string
  email?: string
  password?: string
  accessRole?: prisma.AccessRole
  stories?: StoryCreateManyWithoutAuthorInput | null
  additions?: AdditionCreateManyWithoutWrittenByInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'accessRole', alias?: string  } 
  | { name: 'stories', alias?: string  } 
  | { name: 'additions', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  password?: string | null
  accessRole?: prisma.AccessRole | null
  stories?: StoryUpdateManyWithoutAuthorInput | null
  additions?: AdditionUpdateManyWithoutWrittenByInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'accessRole', alias?: string  } 
  | { name: 'stories', alias?: string  } 
  | { name: 'additions', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  password?: string | null
  accessRole?: prisma.AccessRole | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'accessRole', alias?: string  } 
  
export interface AdditionCreateInput {
  text?: string
  story?: StoryCreateOneWithoutAdditionsInput
  writtenBy?: UserCreateOneWithoutAdditionsInput | null
}
export type AdditionCreateInputInputObject =
  | Extract<keyof AdditionCreateInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'story', alias?: string  } 
  | { name: 'writtenBy', alias?: string  } 
  
export interface AdditionUpdateInput {
  text?: string | null
  story?: StoryUpdateOneRequiredWithoutAdditionsInput | null
  writtenBy?: UserUpdateOneWithoutAdditionsInput | null
}
export type AdditionUpdateInputInputObject =
  | Extract<keyof AdditionUpdateInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'story', alias?: string  } 
  | { name: 'writtenBy', alias?: string  } 
  
export interface AdditionUpdateManyMutationInput {
  text?: string | null
}
export type AdditionUpdateManyMutationInputInputObject =
  | Extract<keyof AdditionUpdateManyMutationInput, string>
  | { name: 'text', alias?: string  } 
  
export interface StorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: StoryWhereInput | null
  AND?: StorySubscriptionWhereInput[]
  OR?: StorySubscriptionWhereInput[]
  NOT?: StorySubscriptionWhereInput[]
}
export type StorySubscriptionWhereInputInputObject =
  | Extract<keyof StorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AdditionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AdditionWhereInput | null
  AND?: AdditionSubscriptionWhereInput[]
  OR?: AdditionSubscriptionWhereInput[]
  NOT?: AdditionSubscriptionWhereInput[]
}
export type AdditionSubscriptionWhereInputInputObject =
  | Extract<keyof AdditionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type AccessRoleValues =
  | 'USER'
  | 'ADMIN'
  
export type AdditionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'text_ASC'
  | 'text_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type StoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'openingLine_ASC'
  | 'openingLine_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'accessRole_ASC'
  | 'accessRole_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  