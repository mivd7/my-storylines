type Query {
  feed: [Story!]!
  me: User
  allStories: [Story!]!
  allUsers: [User!]!
  allAdditions: [Addition!]!
  story(storyId: ID!): Story
  storiesByUser(userId: ID!): [Story!]!
}

type Mutation {
  createStory(content: String!, userId: ID!, published: Boolean!): Story
  createAddition(storyId: ID!, text: String!, userId: ID!): Addition
  publish(storyId: ID!): Story
  signup(email: String!, password: String!, name: String!, accessRole: AccessRole!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type Subscription {
  feedSubscription: Story
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String
  stories: [Story!]
  additions: [Addition!]
  accessRole: AccessRole!
}

type Story {
  id: ID!
  content: String!
  author: User
  additions: [Addition]
}

type Addition {
  id: ID!
  createdAt: DateTime!
  text: String!
  story: Story!
  writtenBy: User
}

scalar DateTime
# add new type additions with many-to-one for stories and 

enum AccessRole {
  USER
  ADMIN
}