// Code generated by Prisma (prisma@1.32.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  addition: (where?: AdditionWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  story: (where?: StoryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  addition: (where: AdditionWhereUniqueInput) => AdditionNullablePromise;
  additions: (args?: {
    where?: AdditionWhereInput;
    orderBy?: AdditionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Addition>;
  additionsConnection: (args?: {
    where?: AdditionWhereInput;
    orderBy?: AdditionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdditionConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  story: (where: StoryWhereUniqueInput) => StoryNullablePromise;
  stories: (args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Story>;
  storiesConnection: (args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StoryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddition: (data: AdditionCreateInput) => AdditionPromise;
  updateAddition: (args: {
    data: AdditionUpdateInput;
    where: AdditionWhereUniqueInput;
  }) => AdditionPromise;
  updateManyAdditions: (args: {
    data: AdditionUpdateManyMutationInput;
    where?: AdditionWhereInput;
  }) => BatchPayloadPromise;
  upsertAddition: (args: {
    where: AdditionWhereUniqueInput;
    create: AdditionCreateInput;
    update: AdditionUpdateInput;
  }) => AdditionPromise;
  deleteAddition: (where: AdditionWhereUniqueInput) => AdditionPromise;
  deleteManyAdditions: (where?: AdditionWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createStory: (data: StoryCreateInput) => StoryPromise;
  updateStory: (args: {
    data: StoryUpdateInput;
    where: StoryWhereUniqueInput;
  }) => StoryPromise;
  updateManyStories: (args: {
    data: StoryUpdateManyMutationInput;
    where?: StoryWhereInput;
  }) => BatchPayloadPromise;
  upsertStory: (args: {
    where: StoryWhereUniqueInput;
    create: StoryCreateInput;
    update: StoryUpdateInput;
  }) => StoryPromise;
  deleteStory: (where: StoryWhereUniqueInput) => StoryPromise;
  deleteManyStories: (where?: StoryWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  addition: (
    where?: AdditionSubscriptionWhereInput
  ) => AdditionSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  story: (
    where?: StorySubscriptionWhereInput
  ) => StorySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AccessRole = "USER" | "ADMIN";

export type AdditionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "text_ASC"
  | "text_DESC";

export type StoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "openingLine_ASC"
  | "openingLine_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "accessRole_ASC"
  | "accessRole_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AdditionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AdditionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  story?: Maybe<StoryWhereInput>;
  writtenBy?: Maybe<UserWhereInput>;
  AND?: Maybe<AdditionWhereInput[] | AdditionWhereInput>;
  OR?: Maybe<AdditionWhereInput[] | AdditionWhereInput>;
  NOT?: Maybe<AdditionWhereInput[] | AdditionWhereInput>;
}

export interface StoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  openingLine?: Maybe<String>;
  openingLine_not?: Maybe<String>;
  openingLine_in?: Maybe<String[] | String>;
  openingLine_not_in?: Maybe<String[] | String>;
  openingLine_lt?: Maybe<String>;
  openingLine_lte?: Maybe<String>;
  openingLine_gt?: Maybe<String>;
  openingLine_gte?: Maybe<String>;
  openingLine_contains?: Maybe<String>;
  openingLine_not_contains?: Maybe<String>;
  openingLine_starts_with?: Maybe<String>;
  openingLine_not_starts_with?: Maybe<String>;
  openingLine_ends_with?: Maybe<String>;
  openingLine_not_ends_with?: Maybe<String>;
  additions_every?: Maybe<AdditionWhereInput>;
  additions_some?: Maybe<AdditionWhereInput>;
  additions_none?: Maybe<AdditionWhereInput>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<StoryWhereInput[] | StoryWhereInput>;
  OR?: Maybe<StoryWhereInput[] | StoryWhereInput>;
  NOT?: Maybe<StoryWhereInput[] | StoryWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  accessRole?: Maybe<AccessRole>;
  accessRole_not?: Maybe<AccessRole>;
  accessRole_in?: Maybe<AccessRole[] | AccessRole>;
  accessRole_not_in?: Maybe<AccessRole[] | AccessRole>;
  stories_every?: Maybe<StoryWhereInput>;
  stories_some?: Maybe<StoryWhereInput>;
  stories_none?: Maybe<StoryWhereInput>;
  additions_every?: Maybe<AdditionWhereInput>;
  additions_some?: Maybe<AdditionWhereInput>;
  additions_none?: Maybe<AdditionWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  sentBy?: Maybe<UserWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type StoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}>;

export interface AdditionCreateInput {
  text: String;
  story: StoryCreateOneWithoutAdditionsInput;
  writtenBy?: Maybe<UserCreateOneWithoutAdditionsInput>;
}

export interface StoryCreateOneWithoutAdditionsInput {
  create?: Maybe<StoryCreateWithoutAdditionsInput>;
  connect?: Maybe<StoryWhereUniqueInput>;
}

export interface StoryCreateWithoutAdditionsInput {
  title?: Maybe<String>;
  openingLine: String;
  author?: Maybe<UserCreateOneWithoutStoriesInput>;
}

export interface UserCreateOneWithoutStoriesInput {
  create?: Maybe<UserCreateWithoutStoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutStoriesInput {
  name: String;
  email: String;
  password: String;
  accessRole: AccessRole;
  additions?: Maybe<AdditionCreateManyWithoutWrittenByInput>;
  messages?: Maybe<MessageCreateManyWithoutSentByInput>;
}

export interface AdditionCreateManyWithoutWrittenByInput {
  create?: Maybe<
    AdditionCreateWithoutWrittenByInput[] | AdditionCreateWithoutWrittenByInput
  >;
  connect?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
}

export interface AdditionCreateWithoutWrittenByInput {
  text: String;
  story: StoryCreateOneWithoutAdditionsInput;
}

export interface MessageCreateManyWithoutSentByInput {
  create?: Maybe<
    MessageCreateWithoutSentByInput[] | MessageCreateWithoutSentByInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutSentByInput {
  text: String;
}

export interface UserCreateOneWithoutAdditionsInput {
  create?: Maybe<UserCreateWithoutAdditionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAdditionsInput {
  name: String;
  email: String;
  password: String;
  accessRole: AccessRole;
  stories?: Maybe<StoryCreateManyWithoutAuthorInput>;
  messages?: Maybe<MessageCreateManyWithoutSentByInput>;
}

export interface StoryCreateManyWithoutAuthorInput {
  create?: Maybe<
    StoryCreateWithoutAuthorInput[] | StoryCreateWithoutAuthorInput
  >;
  connect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
}

export interface StoryCreateWithoutAuthorInput {
  title?: Maybe<String>;
  openingLine: String;
  additions?: Maybe<AdditionCreateManyWithoutStoryInput>;
}

export interface AdditionCreateManyWithoutStoryInput {
  create?: Maybe<
    AdditionCreateWithoutStoryInput[] | AdditionCreateWithoutStoryInput
  >;
  connect?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
}

export interface AdditionCreateWithoutStoryInput {
  text: String;
  writtenBy?: Maybe<UserCreateOneWithoutAdditionsInput>;
}

export interface AdditionUpdateInput {
  text?: Maybe<String>;
  story?: Maybe<StoryUpdateOneRequiredWithoutAdditionsInput>;
  writtenBy?: Maybe<UserUpdateOneWithoutAdditionsInput>;
}

export interface StoryUpdateOneRequiredWithoutAdditionsInput {
  create?: Maybe<StoryCreateWithoutAdditionsInput>;
  update?: Maybe<StoryUpdateWithoutAdditionsDataInput>;
  upsert?: Maybe<StoryUpsertWithoutAdditionsInput>;
  connect?: Maybe<StoryWhereUniqueInput>;
}

export interface StoryUpdateWithoutAdditionsDataInput {
  title?: Maybe<String>;
  openingLine?: Maybe<String>;
  author?: Maybe<UserUpdateOneWithoutStoriesInput>;
}

export interface UserUpdateOneWithoutStoriesInput {
  create?: Maybe<UserCreateWithoutStoriesInput>;
  update?: Maybe<UserUpdateWithoutStoriesDataInput>;
  upsert?: Maybe<UserUpsertWithoutStoriesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutStoriesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  accessRole?: Maybe<AccessRole>;
  additions?: Maybe<AdditionUpdateManyWithoutWrittenByInput>;
  messages?: Maybe<MessageUpdateManyWithoutSentByInput>;
}

export interface AdditionUpdateManyWithoutWrittenByInput {
  create?: Maybe<
    AdditionCreateWithoutWrittenByInput[] | AdditionCreateWithoutWrittenByInput
  >;
  delete?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
  connect?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
  set?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
  disconnect?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
  update?: Maybe<
    | AdditionUpdateWithWhereUniqueWithoutWrittenByInput[]
    | AdditionUpdateWithWhereUniqueWithoutWrittenByInput
  >;
  upsert?: Maybe<
    | AdditionUpsertWithWhereUniqueWithoutWrittenByInput[]
    | AdditionUpsertWithWhereUniqueWithoutWrittenByInput
  >;
  deleteMany?: Maybe<AdditionScalarWhereInput[] | AdditionScalarWhereInput>;
  updateMany?: Maybe<
    | AdditionUpdateManyWithWhereNestedInput[]
    | AdditionUpdateManyWithWhereNestedInput
  >;
}

export interface AdditionUpdateWithWhereUniqueWithoutWrittenByInput {
  where: AdditionWhereUniqueInput;
  data: AdditionUpdateWithoutWrittenByDataInput;
}

export interface AdditionUpdateWithoutWrittenByDataInput {
  text?: Maybe<String>;
  story?: Maybe<StoryUpdateOneRequiredWithoutAdditionsInput>;
}

export interface AdditionUpsertWithWhereUniqueWithoutWrittenByInput {
  where: AdditionWhereUniqueInput;
  update: AdditionUpdateWithoutWrittenByDataInput;
  create: AdditionCreateWithoutWrittenByInput;
}

export interface AdditionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<AdditionScalarWhereInput[] | AdditionScalarWhereInput>;
  OR?: Maybe<AdditionScalarWhereInput[] | AdditionScalarWhereInput>;
  NOT?: Maybe<AdditionScalarWhereInput[] | AdditionScalarWhereInput>;
}

export interface AdditionUpdateManyWithWhereNestedInput {
  where: AdditionScalarWhereInput;
  data: AdditionUpdateManyDataInput;
}

export interface AdditionUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface MessageUpdateManyWithoutSentByInput {
  create?: Maybe<
    MessageCreateWithoutSentByInput[] | MessageCreateWithoutSentByInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutSentByInput[]
    | MessageUpdateWithWhereUniqueWithoutSentByInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutSentByInput[]
    | MessageUpsertWithWhereUniqueWithoutSentByInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutSentByInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutSentByDataInput;
}

export interface MessageUpdateWithoutSentByDataInput {
  text?: Maybe<String>;
}

export interface MessageUpsertWithWhereUniqueWithoutSentByInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutSentByDataInput;
  create: MessageCreateWithoutSentByInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithoutStoriesInput {
  update: UserUpdateWithoutStoriesDataInput;
  create: UserCreateWithoutStoriesInput;
}

export interface StoryUpsertWithoutAdditionsInput {
  update: StoryUpdateWithoutAdditionsDataInput;
  create: StoryCreateWithoutAdditionsInput;
}

export interface UserUpdateOneWithoutAdditionsInput {
  create?: Maybe<UserCreateWithoutAdditionsInput>;
  update?: Maybe<UserUpdateWithoutAdditionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutAdditionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAdditionsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  accessRole?: Maybe<AccessRole>;
  stories?: Maybe<StoryUpdateManyWithoutAuthorInput>;
  messages?: Maybe<MessageUpdateManyWithoutSentByInput>;
}

export interface StoryUpdateManyWithoutAuthorInput {
  create?: Maybe<
    StoryCreateWithoutAuthorInput[] | StoryCreateWithoutAuthorInput
  >;
  delete?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  connect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  set?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  disconnect?: Maybe<StoryWhereUniqueInput[] | StoryWhereUniqueInput>;
  update?: Maybe<
    | StoryUpdateWithWhereUniqueWithoutAuthorInput[]
    | StoryUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | StoryUpsertWithWhereUniqueWithoutAuthorInput[]
    | StoryUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
  updateMany?: Maybe<
    StoryUpdateManyWithWhereNestedInput[] | StoryUpdateManyWithWhereNestedInput
  >;
}

export interface StoryUpdateWithWhereUniqueWithoutAuthorInput {
  where: StoryWhereUniqueInput;
  data: StoryUpdateWithoutAuthorDataInput;
}

export interface StoryUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  openingLine?: Maybe<String>;
  additions?: Maybe<AdditionUpdateManyWithoutStoryInput>;
}

export interface AdditionUpdateManyWithoutStoryInput {
  create?: Maybe<
    AdditionCreateWithoutStoryInput[] | AdditionCreateWithoutStoryInput
  >;
  delete?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
  connect?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
  set?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
  disconnect?: Maybe<AdditionWhereUniqueInput[] | AdditionWhereUniqueInput>;
  update?: Maybe<
    | AdditionUpdateWithWhereUniqueWithoutStoryInput[]
    | AdditionUpdateWithWhereUniqueWithoutStoryInput
  >;
  upsert?: Maybe<
    | AdditionUpsertWithWhereUniqueWithoutStoryInput[]
    | AdditionUpsertWithWhereUniqueWithoutStoryInput
  >;
  deleteMany?: Maybe<AdditionScalarWhereInput[] | AdditionScalarWhereInput>;
  updateMany?: Maybe<
    | AdditionUpdateManyWithWhereNestedInput[]
    | AdditionUpdateManyWithWhereNestedInput
  >;
}

export interface AdditionUpdateWithWhereUniqueWithoutStoryInput {
  where: AdditionWhereUniqueInput;
  data: AdditionUpdateWithoutStoryDataInput;
}

export interface AdditionUpdateWithoutStoryDataInput {
  text?: Maybe<String>;
  writtenBy?: Maybe<UserUpdateOneWithoutAdditionsInput>;
}

export interface AdditionUpsertWithWhereUniqueWithoutStoryInput {
  where: AdditionWhereUniqueInput;
  update: AdditionUpdateWithoutStoryDataInput;
  create: AdditionCreateWithoutStoryInput;
}

export interface StoryUpsertWithWhereUniqueWithoutAuthorInput {
  where: StoryWhereUniqueInput;
  update: StoryUpdateWithoutAuthorDataInput;
  create: StoryCreateWithoutAuthorInput;
}

export interface StoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  openingLine?: Maybe<String>;
  openingLine_not?: Maybe<String>;
  openingLine_in?: Maybe<String[] | String>;
  openingLine_not_in?: Maybe<String[] | String>;
  openingLine_lt?: Maybe<String>;
  openingLine_lte?: Maybe<String>;
  openingLine_gt?: Maybe<String>;
  openingLine_gte?: Maybe<String>;
  openingLine_contains?: Maybe<String>;
  openingLine_not_contains?: Maybe<String>;
  openingLine_starts_with?: Maybe<String>;
  openingLine_not_starts_with?: Maybe<String>;
  openingLine_ends_with?: Maybe<String>;
  openingLine_not_ends_with?: Maybe<String>;
  AND?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
  OR?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
  NOT?: Maybe<StoryScalarWhereInput[] | StoryScalarWhereInput>;
}

export interface StoryUpdateManyWithWhereNestedInput {
  where: StoryScalarWhereInput;
  data: StoryUpdateManyDataInput;
}

export interface StoryUpdateManyDataInput {
  title?: Maybe<String>;
  openingLine?: Maybe<String>;
}

export interface UserUpsertWithoutAdditionsInput {
  update: UserUpdateWithoutAdditionsDataInput;
  create: UserCreateWithoutAdditionsInput;
}

export interface AdditionUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface MessageCreateInput {
  text: String;
  sentBy?: Maybe<UserCreateOneWithoutMessagesInput>;
}

export interface UserCreateOneWithoutMessagesInput {
  create?: Maybe<UserCreateWithoutMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMessagesInput {
  name: String;
  email: String;
  password: String;
  accessRole: AccessRole;
  stories?: Maybe<StoryCreateManyWithoutAuthorInput>;
  additions?: Maybe<AdditionCreateManyWithoutWrittenByInput>;
}

export interface MessageUpdateInput {
  text?: Maybe<String>;
  sentBy?: Maybe<UserUpdateOneWithoutMessagesInput>;
}

export interface UserUpdateOneWithoutMessagesInput {
  create?: Maybe<UserCreateWithoutMessagesInput>;
  update?: Maybe<UserUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMessagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMessagesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  accessRole?: Maybe<AccessRole>;
  stories?: Maybe<StoryUpdateManyWithoutAuthorInput>;
  additions?: Maybe<AdditionUpdateManyWithoutWrittenByInput>;
}

export interface UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput;
  create: UserCreateWithoutMessagesInput;
}

export interface MessageUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface StoryCreateInput {
  title?: Maybe<String>;
  openingLine: String;
  additions?: Maybe<AdditionCreateManyWithoutStoryInput>;
  author?: Maybe<UserCreateOneWithoutStoriesInput>;
}

export interface StoryUpdateInput {
  title?: Maybe<String>;
  openingLine?: Maybe<String>;
  additions?: Maybe<AdditionUpdateManyWithoutStoryInput>;
  author?: Maybe<UserUpdateOneWithoutStoriesInput>;
}

export interface StoryUpdateManyMutationInput {
  title?: Maybe<String>;
  openingLine?: Maybe<String>;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  accessRole: AccessRole;
  stories?: Maybe<StoryCreateManyWithoutAuthorInput>;
  additions?: Maybe<AdditionCreateManyWithoutWrittenByInput>;
  messages?: Maybe<MessageCreateManyWithoutSentByInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  accessRole?: Maybe<AccessRole>;
  stories?: Maybe<StoryUpdateManyWithoutAuthorInput>;
  additions?: Maybe<AdditionUpdateManyWithoutWrittenByInput>;
  messages?: Maybe<MessageUpdateManyWithoutSentByInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  accessRole?: Maybe<AccessRole>;
}

export interface AdditionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdditionWhereInput>;
  AND?: Maybe<
    AdditionSubscriptionWhereInput[] | AdditionSubscriptionWhereInput
  >;
  OR?: Maybe<AdditionSubscriptionWhereInput[] | AdditionSubscriptionWhereInput>;
  NOT?: Maybe<
    AdditionSubscriptionWhereInput[] | AdditionSubscriptionWhereInput
  >;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface StorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StoryWhereInput>;
  AND?: Maybe<StorySubscriptionWhereInput[] | StorySubscriptionWhereInput>;
  OR?: Maybe<StorySubscriptionWhereInput[] | StorySubscriptionWhereInput>;
  NOT?: Maybe<StorySubscriptionWhereInput[] | StorySubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Addition {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
}

export interface AdditionPromise extends Promise<Addition>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  story: <T = StoryPromise>() => T;
  writtenBy: <T = UserPromise>() => T;
}

export interface AdditionSubscription
  extends Promise<AsyncIterator<Addition>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  story: <T = StorySubscription>() => T;
  writtenBy: <T = UserSubscription>() => T;
}

export interface AdditionNullablePromise
  extends Promise<Addition | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  story: <T = StoryPromise>() => T;
  writtenBy: <T = UserPromise>() => T;
}

export interface Story {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title?: String;
  openingLine: String;
}

export interface StoryPromise extends Promise<Story>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  openingLine: () => Promise<String>;
  additions: <T = FragmentableArray<Addition>>(args?: {
    where?: AdditionWhereInput;
    orderBy?: AdditionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  author: <T = UserPromise>() => T;
}

export interface StorySubscription
  extends Promise<AsyncIterator<Story>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  openingLine: () => Promise<AsyncIterator<String>>;
  additions: <T = Promise<AsyncIterator<AdditionSubscription>>>(args?: {
    where?: AdditionWhereInput;
    orderBy?: AdditionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  author: <T = UserSubscription>() => T;
}

export interface StoryNullablePromise
  extends Promise<Story | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  openingLine: () => Promise<String>;
  additions: <T = FragmentableArray<Addition>>(args?: {
    where?: AdditionWhereInput;
    orderBy?: AdditionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  author: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  accessRole: AccessRole;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  accessRole: () => Promise<AccessRole>;
  stories: <T = FragmentableArray<Story>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  additions: <T = FragmentableArray<Addition>>(args?: {
    where?: AdditionWhereInput;
    orderBy?: AdditionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  accessRole: () => Promise<AsyncIterator<AccessRole>>;
  stories: <T = Promise<AsyncIterator<StorySubscription>>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  additions: <T = Promise<AsyncIterator<AdditionSubscription>>>(args?: {
    where?: AdditionWhereInput;
    orderBy?: AdditionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  accessRole: () => Promise<AccessRole>;
  stories: <T = FragmentableArray<Story>>(args?: {
    where?: StoryWhereInput;
    orderBy?: StoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  additions: <T = FragmentableArray<Addition>>(args?: {
    where?: AdditionWhereInput;
    orderBy?: AdditionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Message {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  sentBy: <T = UserPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sentBy: <T = UserSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  sentBy: <T = UserPromise>() => T;
}

export interface AdditionConnection {
  pageInfo: PageInfo;
  edges: AdditionEdge[];
}

export interface AdditionConnectionPromise
  extends Promise<AdditionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdditionEdge>>() => T;
  aggregate: <T = AggregateAdditionPromise>() => T;
}

export interface AdditionConnectionSubscription
  extends Promise<AsyncIterator<AdditionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdditionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdditionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AdditionEdge {
  node: Addition;
  cursor: String;
}

export interface AdditionEdgePromise
  extends Promise<AdditionEdge>,
    Fragmentable {
  node: <T = AdditionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdditionEdgeSubscription
  extends Promise<AsyncIterator<AdditionEdge>>,
    Fragmentable {
  node: <T = AdditionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddition {
  count: Int;
}

export interface AggregateAdditionPromise
  extends Promise<AggregateAddition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdditionSubscription
  extends Promise<AsyncIterator<AggregateAddition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StoryConnection {
  pageInfo: PageInfo;
  edges: StoryEdge[];
}

export interface StoryConnectionPromise
  extends Promise<StoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoryEdge>>() => T;
  aggregate: <T = AggregateStoryPromise>() => T;
}

export interface StoryConnectionSubscription
  extends Promise<AsyncIterator<StoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStorySubscription>() => T;
}

export interface StoryEdge {
  node: Story;
  cursor: String;
}

export interface StoryEdgePromise extends Promise<StoryEdge>, Fragmentable {
  node: <T = StoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoryEdgeSubscription
  extends Promise<AsyncIterator<StoryEdge>>,
    Fragmentable {
  node: <T = StorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStory {
  count: Int;
}

export interface AggregateStoryPromise
  extends Promise<AggregateStory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStorySubscription
  extends Promise<AsyncIterator<AggregateStory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AdditionSubscriptionPayload {
  mutation: MutationType;
  node: Addition;
  updatedFields: String[];
  previousValues: AdditionPreviousValues;
}

export interface AdditionSubscriptionPayloadPromise
  extends Promise<AdditionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdditionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdditionPreviousValuesPromise>() => T;
}

export interface AdditionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdditionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdditionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdditionPreviousValuesSubscription>() => T;
}

export interface AdditionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
}

export interface AdditionPreviousValuesPromise
  extends Promise<AdditionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface AdditionPreviousValuesSubscription
  extends Promise<AsyncIterator<AdditionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StorySubscriptionPayload {
  mutation: MutationType;
  node: Story;
  updatedFields: String[];
  previousValues: StoryPreviousValues;
}

export interface StorySubscriptionPayloadPromise
  extends Promise<StorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoryPreviousValuesPromise>() => T;
}

export interface StorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoryPreviousValuesSubscription>() => T;
}

export interface StoryPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title?: String;
  openingLine: String;
}

export interface StoryPreviousValuesPromise
  extends Promise<StoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  openingLine: () => Promise<String>;
}

export interface StoryPreviousValuesSubscription
  extends Promise<AsyncIterator<StoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  openingLine: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  accessRole: AccessRole;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  accessRole: () => Promise<AccessRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  accessRole: () => Promise<AsyncIterator<AccessRole>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Story",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Addition",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "AccessRole",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
